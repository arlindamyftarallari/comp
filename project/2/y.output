Terminals which are not used

   RESERVED


State 17 conflicts: 1 shift/reduce
State 44 conflicts: 1 reduce/reduce
State 66 conflicts: 1 shift/reduce
State 70 conflicts: 2 shift/reduce
State 74 conflicts: 2 shift/reduce
State 80 conflicts: 2 shift/reduce
State 81 conflicts: 7 reduce/reduce
State 82 conflicts: 2 shift/reduce, 5 reduce/reduce
State 83 conflicts: 7 reduce/reduce
State 107 conflicts: 2 shift/reduce
State 108 conflicts: 2 shift/reduce
State 111 conflicts: 2 shift/reduce
State 113 conflicts: 13 shift/reduce, 7 reduce/reduce
State 125 conflicts: 2 shift/reduce
State 135 conflicts: 2 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: PACKAGE ID SEMICOLON Declarations

    2 Declarations: VarDeclaration SEMICOLON Declarations
    3             | FuncDeclaration SEMICOLON Declarations
    4             | /* empty */

    5 Type: INT
    6     | FLOAT32
    7     | BOOL
    8     | STRING

    9 VarDeclaration: VAR LPAROpt VarSpec SEMICOLONOpt RPAROpt

   10 LPAROpt: LPAR
   11        | /* empty */

   12 SEMICOLONOpt: SEMICOLON
   13             | /* empty */

   14 RPAROpt: RPAR
   15        | /* empty */

   16 VarSpec: ID Aux1 Type

   17 Aux1: COMMA ID Aux1
   18     | /* empty */

   19 FuncDeclaration: FUNC ID LPAR ParametersOpt RPAR TypeOpt FuncBody

   20 ParametersOpt: Parameters
   21              | /* empty */

   22 TypeOpt: Type
   23        | /* empty */

   24 Parameters: ID Type Aux2

   25 Aux2: COMMA ID Type
   26     | /* empty */

   27 FuncBody: LBRACE VarsAndStatementsOpt RBRACE

   28 VarsAndStatementsOpt: VarsAndStatements
   29                     | /* empty */

   30 VarsAndStatements: VarsAndStatements Aux7 SEMICOLON
   31                  | /* empty */

   32 Aux7: VarDeclaration
   33     | Statement
   34     | /* empty */

   35 Statement: ID ASSIGN Expr
   36          | LBRACE Aux3 RBRACE
   37          | IF Expr LBRACE Aux3 RBRACE Aux4
   38          | FOR ExprOpt LBRACE Aux3 RBRACE
   39          | RETURN ExprOpt
   40          | FuncInvocation
   41          | ParseArgs
   42          | PRINT LPAR Aux6 RPAR

   43 Aux6: STRLIT
   44     | Expr

   45 ExprOpt: Expr
   46        | /* empty */

   47 Aux3: Statement SEMICOLON Aux3
   48     | /* empty */

   49 Aux4: ELSE LBRACE Aux3 RBRACE
   50     | /* empty */

   51 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR

   52 FuncInvocation: ID LPAR Aux40 RPAR

   53 Aux40: Expr Aux41
   54      | /* empty */

   55 Aux41: COMMA Expr Aux41
   56      | /* empty */

   57 Expr: INTLIT
   58     | REALLIT
   59     | ID
   60     | FuncInvocation
   61     | LPAR Expr RPAR
   62     | NOT Expr
   63     | MINUS Expr
   64     | PLUS Expr
   65     | Expr Aux8 Expr

   66 Aux8: Aux5
   67     | Aux42
   68     | Aux43
   69     | /* empty */

   70 Aux5: PLUS
   71     | MINUS
   72     | STAR
   73     | DIV
   74     | MOD

   75 Aux42: OR
   76      | AND

   77 Aux43: LT
   78      | GT
   79      | EQ
   80      | NE
   81      | LE
   82      | GE


Terminals, with rules where they appear

$end (0) 0
error (256)
SEMICOLON (258) 1 2 3 12 30 47
BLANKID (259) 51
PACKAGE (260) 1
RETURN (261) 39
AND (262) 76
ASSIGN (263) 35 51
STAR (264) 72
COMMA (265) 17 25 51 55
DIV (266) 73
EQ (267) 79
GE (268) 82
GT (269) 78
LBRACE (270) 27 36 37 38 49
LE (271) 81
LPAR (272) 10 19 42 51 52 61
LSQ (273) 51
LT (274) 77
MINUS (275) 63 71
MOD (276) 74
NE (277) 80
NOT (278) 62
OR (279) 75
PLUS (280) 64 70
RBRACE (281) 27 36 37 38 49
RPAR (282) 14 19 42 51 52 61
RSQ (283) 51
ELSE (284) 49
FOR (285) 38
IF (286) 37
VAR (287) 9
INT (288) 5
FLOAT32 (289) 6
BOOL (290) 7
STRING (291) 8
PRINT (292) 42
PARSEINT (293) 51
FUNC (294) 19
CMDARGS (295) 51
RESERVED (296)
STRLIT (297) 43
INTLIT (298) 57
ID (299) 1 16 17 19 24 25 35 51 52 59
REALLIT (300) 58


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
Program (47)
    on left: 1, on right: 0
Declarations (48)
    on left: 2 3 4, on right: 1 2 3
Type (49)
    on left: 5 6 7 8, on right: 16 22 24 25
VarDeclaration (50)
    on left: 9, on right: 2 32
LPAROpt (51)
    on left: 10 11, on right: 9
SEMICOLONOpt (52)
    on left: 12 13, on right: 9
RPAROpt (53)
    on left: 14 15, on right: 9
VarSpec (54)
    on left: 16, on right: 9
Aux1 (55)
    on left: 17 18, on right: 16 17
FuncDeclaration (56)
    on left: 19, on right: 3
ParametersOpt (57)
    on left: 20 21, on right: 19
TypeOpt (58)
    on left: 22 23, on right: 19
Parameters (59)
    on left: 24, on right: 20
Aux2 (60)
    on left: 25 26, on right: 24
FuncBody (61)
    on left: 27, on right: 19
VarsAndStatementsOpt (62)
    on left: 28 29, on right: 27
VarsAndStatements (63)
    on left: 30 31, on right: 28 30
Aux7 (64)
    on left: 32 33 34, on right: 30
Statement (65)
    on left: 35 36 37 38 39 40 41 42, on right: 33 47
Aux6 (66)
    on left: 43 44, on right: 42
ExprOpt (67)
    on left: 45 46, on right: 38 39
Aux3 (68)
    on left: 47 48, on right: 36 37 38 47 49
Aux4 (69)
    on left: 49 50, on right: 37
ParseArgs (70)
    on left: 51, on right: 41
FuncInvocation (71)
    on left: 52, on right: 40 60
Aux40 (72)
    on left: 53 54, on right: 52
Aux41 (73)
    on left: 55 56, on right: 53 55
Expr (74)
    on left: 57 58 59 60 61 62 63 64 65, on right: 35 37 44 45 51 53
    55 61 62 63 64 65
Aux8 (75)
    on left: 66 67 68 69, on right: 65
Aux5 (76)
    on left: 70 71 72 73 74, on right: 66
Aux42 (77)
    on left: 75 76, on right: 67
Aux43 (78)
    on left: 77 78 79 80 81 82, on right: 68


state 0

    0 $accept: . Program $end

    PACKAGE  shift, and go to state 1

    Program  go to state 2


state 1

    1 Program: PACKAGE . ID SEMICOLON Declarations

    ID  shift, and go to state 3


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 4


state 3

    1 Program: PACKAGE ID . SEMICOLON Declarations

    SEMICOLON  shift, and go to state 5


state 4

    0 $accept: Program $end .

    $default  accept


state 5

    1 Program: PACKAGE ID SEMICOLON . Declarations

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 4 (Declarations)

    Declarations     go to state 8
    VarDeclaration   go to state 9
    FuncDeclaration  go to state 10


state 6

    9 VarDeclaration: VAR . LPAROpt VarSpec SEMICOLONOpt RPAROpt

    LPAR  shift, and go to state 11

    $default  reduce using rule 11 (LPAROpt)

    LPAROpt  go to state 12


state 7

   19 FuncDeclaration: FUNC . ID LPAR ParametersOpt RPAR TypeOpt FuncBody

    ID  shift, and go to state 13


state 8

    1 Program: PACKAGE ID SEMICOLON Declarations .

    $default  reduce using rule 1 (Program)


state 9

    2 Declarations: VarDeclaration . SEMICOLON Declarations

    SEMICOLON  shift, and go to state 14


state 10

    3 Declarations: FuncDeclaration . SEMICOLON Declarations

    SEMICOLON  shift, and go to state 15


state 11

   10 LPAROpt: LPAR .

    $default  reduce using rule 10 (LPAROpt)


state 12

    9 VarDeclaration: VAR LPAROpt . VarSpec SEMICOLONOpt RPAROpt

    ID  shift, and go to state 16

    VarSpec  go to state 17


state 13

   19 FuncDeclaration: FUNC ID . LPAR ParametersOpt RPAR TypeOpt FuncBody

    LPAR  shift, and go to state 18


state 14

    2 Declarations: VarDeclaration SEMICOLON . Declarations

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 4 (Declarations)

    Declarations     go to state 19
    VarDeclaration   go to state 9
    FuncDeclaration  go to state 10


state 15

    3 Declarations: FuncDeclaration SEMICOLON . Declarations

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 4 (Declarations)

    Declarations     go to state 20
    VarDeclaration   go to state 9
    FuncDeclaration  go to state 10


state 16

   16 VarSpec: ID . Aux1 Type

    COMMA  shift, and go to state 21

    $default  reduce using rule 18 (Aux1)

    Aux1  go to state 22


state 17

    9 VarDeclaration: VAR LPAROpt VarSpec . SEMICOLONOpt RPAROpt

    SEMICOLON  shift, and go to state 23

    SEMICOLON  [reduce using rule 13 (SEMICOLONOpt)]
    $default   reduce using rule 13 (SEMICOLONOpt)

    SEMICOLONOpt  go to state 24


state 18

   19 FuncDeclaration: FUNC ID LPAR . ParametersOpt RPAR TypeOpt FuncBody

    ID  shift, and go to state 25

    $default  reduce using rule 21 (ParametersOpt)

    ParametersOpt  go to state 26
    Parameters     go to state 27


state 19

    2 Declarations: VarDeclaration SEMICOLON Declarations .

    $default  reduce using rule 2 (Declarations)


state 20

    3 Declarations: FuncDeclaration SEMICOLON Declarations .

    $default  reduce using rule 3 (Declarations)


state 21

   17 Aux1: COMMA . ID Aux1

    ID  shift, and go to state 28


state 22

   16 VarSpec: ID Aux1 . Type

    INT      shift, and go to state 29
    FLOAT32  shift, and go to state 30
    BOOL     shift, and go to state 31
    STRING   shift, and go to state 32

    Type  go to state 33


state 23

   12 SEMICOLONOpt: SEMICOLON .

    $default  reduce using rule 12 (SEMICOLONOpt)


state 24

    9 VarDeclaration: VAR LPAROpt VarSpec SEMICOLONOpt . RPAROpt

    RPAR  shift, and go to state 34

    $default  reduce using rule 15 (RPAROpt)

    RPAROpt  go to state 35


state 25

   24 Parameters: ID . Type Aux2

    INT      shift, and go to state 29
    FLOAT32  shift, and go to state 30
    BOOL     shift, and go to state 31
    STRING   shift, and go to state 32

    Type  go to state 36


state 26

   19 FuncDeclaration: FUNC ID LPAR ParametersOpt . RPAR TypeOpt FuncBody

    RPAR  shift, and go to state 37


state 27

   20 ParametersOpt: Parameters .

    $default  reduce using rule 20 (ParametersOpt)


state 28

   17 Aux1: COMMA ID . Aux1

    COMMA  shift, and go to state 21

    $default  reduce using rule 18 (Aux1)

    Aux1  go to state 38


state 29

    5 Type: INT .

    $default  reduce using rule 5 (Type)


state 30

    6 Type: FLOAT32 .

    $default  reduce using rule 6 (Type)


state 31

    7 Type: BOOL .

    $default  reduce using rule 7 (Type)


state 32

    8 Type: STRING .

    $default  reduce using rule 8 (Type)


state 33

   16 VarSpec: ID Aux1 Type .

    $default  reduce using rule 16 (VarSpec)


state 34

   14 RPAROpt: RPAR .

    $default  reduce using rule 14 (RPAROpt)


state 35

    9 VarDeclaration: VAR LPAROpt VarSpec SEMICOLONOpt RPAROpt .

    $default  reduce using rule 9 (VarDeclaration)


state 36

   24 Parameters: ID Type . Aux2

    COMMA  shift, and go to state 39

    $default  reduce using rule 26 (Aux2)

    Aux2  go to state 40


state 37

   19 FuncDeclaration: FUNC ID LPAR ParametersOpt RPAR . TypeOpt FuncBody

    INT      shift, and go to state 29
    FLOAT32  shift, and go to state 30
    BOOL     shift, and go to state 31
    STRING   shift, and go to state 32

    $default  reduce using rule 23 (TypeOpt)

    Type     go to state 41
    TypeOpt  go to state 42


state 38

   17 Aux1: COMMA ID Aux1 .

    $default  reduce using rule 17 (Aux1)


state 39

   25 Aux2: COMMA . ID Type

    ID  shift, and go to state 43


state 40

   24 Parameters: ID Type Aux2 .

    $default  reduce using rule 24 (Parameters)


state 41

   22 TypeOpt: Type .

    $default  reduce using rule 22 (TypeOpt)


state 42

   19 FuncDeclaration: FUNC ID LPAR ParametersOpt RPAR TypeOpt . FuncBody

    LBRACE  shift, and go to state 44

    FuncBody  go to state 45


state 43

   25 Aux2: COMMA ID . Type

    INT      shift, and go to state 29
    FLOAT32  shift, and go to state 30
    BOOL     shift, and go to state 31
    STRING   shift, and go to state 32

    Type  go to state 46


state 44

   27 FuncBody: LBRACE . VarsAndStatementsOpt RBRACE

    RBRACE    reduce using rule 29 (VarsAndStatementsOpt)
    RBRACE    [reduce using rule 31 (VarsAndStatements)]
    $default  reduce using rule 31 (VarsAndStatements)

    VarsAndStatementsOpt  go to state 47
    VarsAndStatements     go to state 48


state 45

   19 FuncDeclaration: FUNC ID LPAR ParametersOpt RPAR TypeOpt FuncBody .

    $default  reduce using rule 19 (FuncDeclaration)


state 46

   25 Aux2: COMMA ID Type .

    $default  reduce using rule 25 (Aux2)


state 47

   27 FuncBody: LBRACE VarsAndStatementsOpt . RBRACE

    RBRACE  shift, and go to state 49


state 48

   28 VarsAndStatementsOpt: VarsAndStatements .
   30 VarsAndStatements: VarsAndStatements . Aux7 SEMICOLON

    RETURN  shift, and go to state 50
    LBRACE  shift, and go to state 51
    FOR     shift, and go to state 52
    IF      shift, and go to state 53
    VAR     shift, and go to state 6
    PRINT   shift, and go to state 54
    ID      shift, and go to state 55

    SEMICOLON  reduce using rule 34 (Aux7)
    $default   reduce using rule 28 (VarsAndStatementsOpt)

    VarDeclaration  go to state 56
    Aux7            go to state 57
    Statement       go to state 58
    ParseArgs       go to state 59
    FuncInvocation  go to state 60


state 49

   27 FuncBody: LBRACE VarsAndStatementsOpt RBRACE .

    $default  reduce using rule 27 (FuncBody)


state 50

   39 Statement: RETURN . ExprOpt

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    $default  reduce using rule 46 (ExprOpt)

    ExprOpt         go to state 68
    FuncInvocation  go to state 69
    Expr            go to state 70


state 51

   36 Statement: LBRACE . Aux3 RBRACE

    RETURN  shift, and go to state 50
    LBRACE  shift, and go to state 51
    FOR     shift, and go to state 52
    IF      shift, and go to state 53
    PRINT   shift, and go to state 54
    ID      shift, and go to state 55

    $default  reduce using rule 48 (Aux3)

    Statement       go to state 71
    Aux3            go to state 72
    ParseArgs       go to state 59
    FuncInvocation  go to state 60


state 52

   38 Statement: FOR . ExprOpt LBRACE Aux3 RBRACE

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    $default  reduce using rule 46 (ExprOpt)

    ExprOpt         go to state 73
    FuncInvocation  go to state 69
    Expr            go to state 70


state 53

   37 Statement: IF . Expr LBRACE Aux3 RBRACE Aux4

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    FuncInvocation  go to state 69
    Expr            go to state 74


state 54

   42 Statement: PRINT . LPAR Aux6 RPAR

    LPAR  shift, and go to state 75


state 55

   35 Statement: ID . ASSIGN Expr
   51 ParseArgs: ID . COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR
   52 FuncInvocation: ID . LPAR Aux40 RPAR

    ASSIGN  shift, and go to state 76
    COMMA   shift, and go to state 77
    LPAR    shift, and go to state 78


state 56

   32 Aux7: VarDeclaration .

    $default  reduce using rule 32 (Aux7)


state 57

   30 VarsAndStatements: VarsAndStatements Aux7 . SEMICOLON

    SEMICOLON  shift, and go to state 79


state 58

   33 Aux7: Statement .

    $default  reduce using rule 33 (Aux7)


state 59

   41 Statement: ParseArgs .

    $default  reduce using rule 41 (Statement)


state 60

   40 Statement: FuncInvocation .

    $default  reduce using rule 40 (Statement)


state 61

   61 Expr: LPAR . Expr RPAR

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    FuncInvocation  go to state 69
    Expr            go to state 80


state 62

   63 Expr: MINUS . Expr

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    FuncInvocation  go to state 69
    Expr            go to state 81


state 63

   62 Expr: NOT . Expr

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    FuncInvocation  go to state 69
    Expr            go to state 82


state 64

   64 Expr: PLUS . Expr

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    FuncInvocation  go to state 69
    Expr            go to state 83


state 65

   57 Expr: INTLIT .

    $default  reduce using rule 57 (Expr)


state 66

   52 FuncInvocation: ID . LPAR Aux40 RPAR
   59 Expr: ID .

    LPAR  shift, and go to state 78

    LPAR      [reduce using rule 59 (Expr)]
    $default  reduce using rule 59 (Expr)


state 67

   58 Expr: REALLIT .

    $default  reduce using rule 58 (Expr)


state 68

   39 Statement: RETURN ExprOpt .

    $default  reduce using rule 39 (Statement)


state 69

   60 Expr: FuncInvocation .

    $default  reduce using rule 60 (Expr)


state 70

   45 ExprOpt: Expr .
   65 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 84
    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    EQ     shift, and go to state 87
    GE     shift, and go to state 88
    GT     shift, and go to state 89
    LE     shift, and go to state 90
    LT     shift, and go to state 91
    MINUS  shift, and go to state 92
    MOD    shift, and go to state 93
    NE     shift, and go to state 94
    OR     shift, and go to state 95
    PLUS   shift, and go to state 96

    SEMICOLON  reduce using rule 45 (ExprOpt)
    LBRACE     reduce using rule 45 (ExprOpt)
    MINUS      [reduce using rule 69 (Aux8)]
    PLUS       [reduce using rule 69 (Aux8)]
    $default   reduce using rule 69 (Aux8)

    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 71

   47 Aux3: Statement . SEMICOLON Aux3

    SEMICOLON  shift, and go to state 101


state 72

   36 Statement: LBRACE Aux3 . RBRACE

    RBRACE  shift, and go to state 102


state 73

   38 Statement: FOR ExprOpt . LBRACE Aux3 RBRACE

    LBRACE  shift, and go to state 103


state 74

   37 Statement: IF Expr . LBRACE Aux3 RBRACE Aux4
   65 Expr: Expr . Aux8 Expr

    AND     shift, and go to state 84
    STAR    shift, and go to state 85
    DIV     shift, and go to state 86
    EQ      shift, and go to state 87
    GE      shift, and go to state 88
    GT      shift, and go to state 89
    LBRACE  shift, and go to state 104
    LE      shift, and go to state 90
    LT      shift, and go to state 91
    MINUS   shift, and go to state 92
    MOD     shift, and go to state 93
    NE      shift, and go to state 94
    OR      shift, and go to state 95
    PLUS    shift, and go to state 96

    MINUS     [reduce using rule 69 (Aux8)]
    PLUS      [reduce using rule 69 (Aux8)]
    $default  reduce using rule 69 (Aux8)

    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 75

   42 Statement: PRINT LPAR . Aux6 RPAR

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    STRLIT   shift, and go to state 105
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    Aux6            go to state 106
    FuncInvocation  go to state 69
    Expr            go to state 107


state 76

   35 Statement: ID ASSIGN . Expr

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    FuncInvocation  go to state 69
    Expr            go to state 108


state 77

   51 ParseArgs: ID COMMA . BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR

    BLANKID  shift, and go to state 109


state 78

   52 FuncInvocation: ID LPAR . Aux40 RPAR

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    $default  reduce using rule 54 (Aux40)

    FuncInvocation  go to state 69
    Aux40           go to state 110
    Expr            go to state 111


state 79

   30 VarsAndStatements: VarsAndStatements Aux7 SEMICOLON .

    $default  reduce using rule 30 (VarsAndStatements)


state 80

   61 Expr: LPAR Expr . RPAR
   65     | Expr . Aux8 Expr

    AND    shift, and go to state 84
    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    EQ     shift, and go to state 87
    GE     shift, and go to state 88
    GT     shift, and go to state 89
    LE     shift, and go to state 90
    LT     shift, and go to state 91
    MINUS  shift, and go to state 92
    MOD    shift, and go to state 93
    NE     shift, and go to state 94
    OR     shift, and go to state 95
    PLUS   shift, and go to state 96
    RPAR   shift, and go to state 112

    MINUS     [reduce using rule 69 (Aux8)]
    PLUS      [reduce using rule 69 (Aux8)]
    $default  reduce using rule 69 (Aux8)

    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 81

   63 Expr: MINUS Expr .
   65     | Expr . Aux8 Expr

    AND  shift, and go to state 84
    EQ   shift, and go to state 87
    GE   shift, and go to state 88
    GT   shift, and go to state 89
    LE   shift, and go to state 90
    LT   shift, and go to state 91
    NE   shift, and go to state 94
    OR   shift, and go to state 95

    LPAR      reduce using rule 63 (Expr)
    LPAR      [reduce using rule 69 (Aux8)]
    MINUS     reduce using rule 63 (Expr)
    MINUS     [reduce using rule 69 (Aux8)]
    NOT       reduce using rule 63 (Expr)
    NOT       [reduce using rule 69 (Aux8)]
    PLUS      reduce using rule 63 (Expr)
    PLUS      [reduce using rule 69 (Aux8)]
    INTLIT    reduce using rule 63 (Expr)
    INTLIT    [reduce using rule 69 (Aux8)]
    ID        reduce using rule 63 (Expr)
    ID        [reduce using rule 69 (Aux8)]
    REALLIT   reduce using rule 63 (Expr)
    REALLIT   [reduce using rule 69 (Aux8)]
    $default  reduce using rule 63 (Expr)

    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 82

   62 Expr: NOT Expr .
   65     | Expr . Aux8 Expr

    AND    shift, and go to state 84
    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    EQ     shift, and go to state 87
    GE     shift, and go to state 88
    GT     shift, and go to state 89
    LE     shift, and go to state 90
    LT     shift, and go to state 91
    MINUS  shift, and go to state 92
    MOD    shift, and go to state 93
    NE     shift, and go to state 94
    OR     shift, and go to state 95
    PLUS   shift, and go to state 96

    LPAR      reduce using rule 62 (Expr)
    LPAR      [reduce using rule 69 (Aux8)]
    MINUS     [reduce using rule 69 (Aux8)]
    NOT       reduce using rule 62 (Expr)
    NOT       [reduce using rule 69 (Aux8)]
    PLUS      [reduce using rule 69 (Aux8)]
    INTLIT    reduce using rule 62 (Expr)
    INTLIT    [reduce using rule 69 (Aux8)]
    ID        reduce using rule 62 (Expr)
    ID        [reduce using rule 69 (Aux8)]
    REALLIT   reduce using rule 62 (Expr)
    REALLIT   [reduce using rule 69 (Aux8)]
    $default  reduce using rule 62 (Expr)

    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 83

   64 Expr: PLUS Expr .
   65     | Expr . Aux8 Expr

    AND  shift, and go to state 84
    EQ   shift, and go to state 87
    GE   shift, and go to state 88
    GT   shift, and go to state 89
    LE   shift, and go to state 90
    LT   shift, and go to state 91
    NE   shift, and go to state 94
    OR   shift, and go to state 95

    LPAR      reduce using rule 64 (Expr)
    LPAR      [reduce using rule 69 (Aux8)]
    MINUS     reduce using rule 64 (Expr)
    MINUS     [reduce using rule 69 (Aux8)]
    NOT       reduce using rule 64 (Expr)
    NOT       [reduce using rule 69 (Aux8)]
    PLUS      reduce using rule 64 (Expr)
    PLUS      [reduce using rule 69 (Aux8)]
    INTLIT    reduce using rule 64 (Expr)
    INTLIT    [reduce using rule 69 (Aux8)]
    ID        reduce using rule 64 (Expr)
    ID        [reduce using rule 69 (Aux8)]
    REALLIT   reduce using rule 64 (Expr)
    REALLIT   [reduce using rule 69 (Aux8)]
    $default  reduce using rule 64 (Expr)

    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 84

   76 Aux42: AND .

    $default  reduce using rule 76 (Aux42)


state 85

   72 Aux5: STAR .

    $default  reduce using rule 72 (Aux5)


state 86

   73 Aux5: DIV .

    $default  reduce using rule 73 (Aux5)


state 87

   79 Aux43: EQ .

    $default  reduce using rule 79 (Aux43)


state 88

   82 Aux43: GE .

    $default  reduce using rule 82 (Aux43)


state 89

   78 Aux43: GT .

    $default  reduce using rule 78 (Aux43)


state 90

   81 Aux43: LE .

    $default  reduce using rule 81 (Aux43)


state 91

   77 Aux43: LT .

    $default  reduce using rule 77 (Aux43)


state 92

   71 Aux5: MINUS .

    $default  reduce using rule 71 (Aux5)


state 93

   74 Aux5: MOD .

    $default  reduce using rule 74 (Aux5)


state 94

   80 Aux43: NE .

    $default  reduce using rule 80 (Aux43)


state 95

   75 Aux42: OR .

    $default  reduce using rule 75 (Aux42)


state 96

   70 Aux5: PLUS .

    $default  reduce using rule 70 (Aux5)


state 97

   65 Expr: Expr Aux8 . Expr

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    FuncInvocation  go to state 69
    Expr            go to state 113


state 98

   66 Aux8: Aux5 .

    $default  reduce using rule 66 (Aux8)


state 99

   67 Aux8: Aux42 .

    $default  reduce using rule 67 (Aux8)


state 100

   68 Aux8: Aux43 .

    $default  reduce using rule 68 (Aux8)


state 101

   47 Aux3: Statement SEMICOLON . Aux3

    RETURN  shift, and go to state 50
    LBRACE  shift, and go to state 51
    FOR     shift, and go to state 52
    IF      shift, and go to state 53
    PRINT   shift, and go to state 54
    ID      shift, and go to state 55

    $default  reduce using rule 48 (Aux3)

    Statement       go to state 71
    Aux3            go to state 114
    ParseArgs       go to state 59
    FuncInvocation  go to state 60


state 102

   36 Statement: LBRACE Aux3 RBRACE .

    $default  reduce using rule 36 (Statement)


state 103

   38 Statement: FOR ExprOpt LBRACE . Aux3 RBRACE

    RETURN  shift, and go to state 50
    LBRACE  shift, and go to state 51
    FOR     shift, and go to state 52
    IF      shift, and go to state 53
    PRINT   shift, and go to state 54
    ID      shift, and go to state 55

    $default  reduce using rule 48 (Aux3)

    Statement       go to state 71
    Aux3            go to state 115
    ParseArgs       go to state 59
    FuncInvocation  go to state 60


state 104

   37 Statement: IF Expr LBRACE . Aux3 RBRACE Aux4

    RETURN  shift, and go to state 50
    LBRACE  shift, and go to state 51
    FOR     shift, and go to state 52
    IF      shift, and go to state 53
    PRINT   shift, and go to state 54
    ID      shift, and go to state 55

    $default  reduce using rule 48 (Aux3)

    Statement       go to state 71
    Aux3            go to state 116
    ParseArgs       go to state 59
    FuncInvocation  go to state 60


state 105

   43 Aux6: STRLIT .

    $default  reduce using rule 43 (Aux6)


state 106

   42 Statement: PRINT LPAR Aux6 . RPAR

    RPAR  shift, and go to state 117


state 107

   44 Aux6: Expr .
   65 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 84
    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    EQ     shift, and go to state 87
    GE     shift, and go to state 88
    GT     shift, and go to state 89
    LE     shift, and go to state 90
    LT     shift, and go to state 91
    MINUS  shift, and go to state 92
    MOD    shift, and go to state 93
    NE     shift, and go to state 94
    OR     shift, and go to state 95
    PLUS   shift, and go to state 96

    MINUS     [reduce using rule 69 (Aux8)]
    PLUS      [reduce using rule 69 (Aux8)]
    RPAR      reduce using rule 44 (Aux6)
    $default  reduce using rule 69 (Aux8)

    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 108

   35 Statement: ID ASSIGN Expr .
   65 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 84
    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    EQ     shift, and go to state 87
    GE     shift, and go to state 88
    GT     shift, and go to state 89
    LE     shift, and go to state 90
    LT     shift, and go to state 91
    MINUS  shift, and go to state 92
    MOD    shift, and go to state 93
    NE     shift, and go to state 94
    OR     shift, and go to state 95
    PLUS   shift, and go to state 96

    SEMICOLON  reduce using rule 35 (Statement)
    MINUS      [reduce using rule 69 (Aux8)]
    PLUS       [reduce using rule 69 (Aux8)]
    $default   reduce using rule 69 (Aux8)

    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 109

   51 ParseArgs: ID COMMA BLANKID . ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR

    ASSIGN  shift, and go to state 118


state 110

   52 FuncInvocation: ID LPAR Aux40 . RPAR

    RPAR  shift, and go to state 119


state 111

   53 Aux40: Expr . Aux41
   65 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 84
    STAR   shift, and go to state 85
    COMMA  shift, and go to state 120
    DIV    shift, and go to state 86
    EQ     shift, and go to state 87
    GE     shift, and go to state 88
    GT     shift, and go to state 89
    LE     shift, and go to state 90
    LT     shift, and go to state 91
    MINUS  shift, and go to state 92
    MOD    shift, and go to state 93
    NE     shift, and go to state 94
    OR     shift, and go to state 95
    PLUS   shift, and go to state 96

    MINUS     [reduce using rule 69 (Aux8)]
    PLUS      [reduce using rule 69 (Aux8)]
    RPAR      reduce using rule 56 (Aux41)
    $default  reduce using rule 69 (Aux8)

    Aux41  go to state 121
    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 112

   61 Expr: LPAR Expr RPAR .

    $default  reduce using rule 61 (Expr)


state 113

   65 Expr: Expr . Aux8 Expr
   65     | Expr Aux8 Expr .

    AND    shift, and go to state 84
    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    EQ     shift, and go to state 87
    GE     shift, and go to state 88
    GT     shift, and go to state 89
    LE     shift, and go to state 90
    LT     shift, and go to state 91
    MINUS  shift, and go to state 92
    MOD    shift, and go to state 93
    NE     shift, and go to state 94
    OR     shift, and go to state 95
    PLUS   shift, and go to state 96

    AND       [reduce using rule 65 (Expr)]
    STAR      [reduce using rule 65 (Expr)]
    DIV       [reduce using rule 65 (Expr)]
    EQ        [reduce using rule 65 (Expr)]
    GE        [reduce using rule 65 (Expr)]
    GT        [reduce using rule 65 (Expr)]
    LE        [reduce using rule 65 (Expr)]
    LPAR      reduce using rule 65 (Expr)
    LPAR      [reduce using rule 69 (Aux8)]
    LT        [reduce using rule 65 (Expr)]
    MINUS     [reduce using rule 65 (Expr)]
    MINUS     [reduce using rule 69 (Aux8)]
    MOD       [reduce using rule 65 (Expr)]
    NE        [reduce using rule 65 (Expr)]
    NOT       reduce using rule 65 (Expr)
    NOT       [reduce using rule 69 (Aux8)]
    OR        [reduce using rule 65 (Expr)]
    PLUS      [reduce using rule 65 (Expr)]
    PLUS      [reduce using rule 69 (Aux8)]
    INTLIT    reduce using rule 65 (Expr)
    INTLIT    [reduce using rule 69 (Aux8)]
    ID        reduce using rule 65 (Expr)
    ID        [reduce using rule 69 (Aux8)]
    REALLIT   reduce using rule 65 (Expr)
    REALLIT   [reduce using rule 69 (Aux8)]
    $default  reduce using rule 65 (Expr)

    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 114

   47 Aux3: Statement SEMICOLON Aux3 .

    $default  reduce using rule 47 (Aux3)


state 115

   38 Statement: FOR ExprOpt LBRACE Aux3 . RBRACE

    RBRACE  shift, and go to state 122


state 116

   37 Statement: IF Expr LBRACE Aux3 . RBRACE Aux4

    RBRACE  shift, and go to state 123


state 117

   42 Statement: PRINT LPAR Aux6 RPAR .

    $default  reduce using rule 42 (Statement)


state 118

   51 ParseArgs: ID COMMA BLANKID ASSIGN . PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR

    PARSEINT  shift, and go to state 124


state 119

   52 FuncInvocation: ID LPAR Aux40 RPAR .

    $default  reduce using rule 52 (FuncInvocation)


state 120

   55 Aux41: COMMA . Expr Aux41

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    FuncInvocation  go to state 69
    Expr            go to state 125


state 121

   53 Aux40: Expr Aux41 .

    $default  reduce using rule 53 (Aux40)


state 122

   38 Statement: FOR ExprOpt LBRACE Aux3 RBRACE .

    $default  reduce using rule 38 (Statement)


state 123

   37 Statement: IF Expr LBRACE Aux3 RBRACE . Aux4

    ELSE  shift, and go to state 126

    $default  reduce using rule 50 (Aux4)

    Aux4  go to state 127


state 124

   51 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT . LPAR CMDARGS LSQ Expr RSQ RPAR

    LPAR  shift, and go to state 128


state 125

   55 Aux41: COMMA Expr . Aux41
   65 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 84
    STAR   shift, and go to state 85
    COMMA  shift, and go to state 120
    DIV    shift, and go to state 86
    EQ     shift, and go to state 87
    GE     shift, and go to state 88
    GT     shift, and go to state 89
    LE     shift, and go to state 90
    LT     shift, and go to state 91
    MINUS  shift, and go to state 92
    MOD    shift, and go to state 93
    NE     shift, and go to state 94
    OR     shift, and go to state 95
    PLUS   shift, and go to state 96

    MINUS     [reduce using rule 69 (Aux8)]
    PLUS      [reduce using rule 69 (Aux8)]
    RPAR      reduce using rule 56 (Aux41)
    $default  reduce using rule 69 (Aux8)

    Aux41  go to state 129
    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 126

   49 Aux4: ELSE . LBRACE Aux3 RBRACE

    LBRACE  shift, and go to state 130


state 127

   37 Statement: IF Expr LBRACE Aux3 RBRACE Aux4 .

    $default  reduce using rule 37 (Statement)


state 128

   51 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR . CMDARGS LSQ Expr RSQ RPAR

    CMDARGS  shift, and go to state 131


state 129

   55 Aux41: COMMA Expr Aux41 .

    $default  reduce using rule 55 (Aux41)


state 130

   49 Aux4: ELSE LBRACE . Aux3 RBRACE

    RETURN  shift, and go to state 50
    LBRACE  shift, and go to state 51
    FOR     shift, and go to state 52
    IF      shift, and go to state 53
    PRINT   shift, and go to state 54
    ID      shift, and go to state 55

    $default  reduce using rule 48 (Aux3)

    Statement       go to state 71
    Aux3            go to state 132
    ParseArgs       go to state 59
    FuncInvocation  go to state 60


state 131

   51 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS . LSQ Expr RSQ RPAR

    LSQ  shift, and go to state 133


state 132

   49 Aux4: ELSE LBRACE Aux3 . RBRACE

    RBRACE  shift, and go to state 134


state 133

   51 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ . Expr RSQ RPAR

    LPAR     shift, and go to state 61
    MINUS    shift, and go to state 62
    NOT      shift, and go to state 63
    PLUS     shift, and go to state 64
    INTLIT   shift, and go to state 65
    ID       shift, and go to state 66
    REALLIT  shift, and go to state 67

    FuncInvocation  go to state 69
    Expr            go to state 135


state 134

   49 Aux4: ELSE LBRACE Aux3 RBRACE .

    $default  reduce using rule 49 (Aux4)


state 135

   51 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr . RSQ RPAR
   65 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 84
    STAR   shift, and go to state 85
    DIV    shift, and go to state 86
    EQ     shift, and go to state 87
    GE     shift, and go to state 88
    GT     shift, and go to state 89
    LE     shift, and go to state 90
    LT     shift, and go to state 91
    MINUS  shift, and go to state 92
    MOD    shift, and go to state 93
    NE     shift, and go to state 94
    OR     shift, and go to state 95
    PLUS   shift, and go to state 96
    RSQ    shift, and go to state 136

    MINUS     [reduce using rule 69 (Aux8)]
    PLUS      [reduce using rule 69 (Aux8)]
    $default  reduce using rule 69 (Aux8)

    Aux8   go to state 97
    Aux5   go to state 98
    Aux42  go to state 99
    Aux43  go to state 100


state 136

   51 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ . RPAR

    RPAR  shift, and go to state 137


state 137

   51 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR .

    $default  reduce using rule 51 (ParseArgs)
