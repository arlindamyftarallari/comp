Terminals which are not used

   RESERVED


State 111 conflicts: 13 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: PACKAGE ID SEMICOLON Declarations

    2 Declarations: VarDeclaration SEMICOLON Declarations
    3             | FuncDeclaration SEMICOLON Declarations
    4             | /* empty */

    5 Type: INT
    6     | FLOAT32
    7     | BOOL
    8     | STRING

    9 VarDeclaration: VAR VarSpec
   10               | VAR LPAR VarSpec SEMICOLON RPAR

   11 VarSpec: ID Aux1 Type

   12 Aux1: COMMA ID Aux1
   13     | /* empty */

   14 FuncDeclaration: FUNC ID LPAR ParametersOpt RPAR TypeOpt FuncBody

   15 ParametersOpt: Parameters
   16              | /* empty */

   17 TypeOpt: Type
   18        | /* empty */

   19 Parameters: ID Type Aux2

   20 Aux2: COMMA ID Type
   21     | /* empty */

   22 FuncBody: LBRACE VarsAndStatements RBRACE

   23 VarsAndStatements: VarsAndStatements Aux7 SEMICOLON
   24                  | /* empty */

   25 Aux7: VarDeclaration
   26     | Statement
   27     | /* empty */

   28 Statement: ID ASSIGN Expr
   29          | LBRACE Aux3 RBRACE
   30          | IF Expr LBRACE Aux3 RBRACE Aux4
   31          | FOR ExprOpt LBRACE Aux3 RBRACE
   32          | RETURN ExprOpt
   33          | FuncInvocation
   34          | ParseArgs
   35          | PRINT LPAR Aux6 RPAR
   36          | error

   37 Aux6: STRLIT
   38     | Expr

   39 ExprOpt: Expr
   40        | /* empty */

   41 Aux3: Statement SEMICOLON Aux3
   42     | /* empty */

   43 Aux4: ELSE LBRACE Aux3 RBRACE
   44     | /* empty */

   45 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR
   46          | ID COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR

   47 FuncInvocation: ID LPAR Aux40 RPAR

   48 Aux40: Expr Aux41
   49      | error
   50      | /* empty */

   51 Aux41: COMMA Expr Aux41
   52      | /* empty */

   53 Expr: INTLIT
   54     | REALLIT
   55     | ID
   56     | FuncInvocation
   57     | LPAR Expr RPAR
   58     | LPAR error RPAR
   59     | NOT Expr
   60     | MINUS Expr
   61     | PLUS Expr
   62     | Expr Aux8 Expr

   63 Aux8: PLUS
   64     | MINUS
   65     | STAR
   66     | DIV
   67     | MOD
   68     | OR
   69     | AND
   70     | LT
   71     | GT
   72     | EQ
   73     | NE
   74     | LE
   75     | GE


Terminals, with rules where they appear

$end (0) 0
error (256) 36 46 49 58
SEMICOLON (258) 1 2 3 10 23 41
BLANKID (259) 45 46
PACKAGE (260) 1
RETURN (261) 32
AND (262) 69
ASSIGN (263) 28 45 46
STAR (264) 65
COMMA (265) 12 20 45 46 51
DIV (266) 66
EQ (267) 72
GE (268) 75
GT (269) 71
LBRACE (270) 22 29 30 31 43
LE (271) 74
LPAR (272) 10 14 35 45 46 47 57 58
LSQ (273) 45
LT (274) 70
MINUS (275) 60 64
MOD (276) 67
NE (277) 73
NOT (278) 59
OR (279) 68
PLUS (280) 61 63
RBRACE (281) 22 29 30 31 43
RPAR (282) 10 14 35 45 46 47 57 58
RSQ (283) 45
ELSE (284) 43
FOR (285) 31
IF (286) 30
VAR (287) 9 10
INT (288) 5
FLOAT32 (289) 6
BOOL (290) 7
STRING (291) 8
PRINT (292) 35
PARSEINT (293) 45 46
FUNC (294) 14
CMDARGS (295) 45
RESERVED (296)
STRLIT (297) 37
INTLIT (298) 53
ID (299) 1 11 12 14 19 20 28 45 46 47 55
REALLIT (300) 54
UNARY (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
Program (48)
    on left: 1, on right: 0
Declarations (49)
    on left: 2 3 4, on right: 1 2 3
Type (50)
    on left: 5 6 7 8, on right: 11 17 19 20
VarDeclaration (51)
    on left: 9 10, on right: 2 25
VarSpec (52)
    on left: 11, on right: 9 10
Aux1 (53)
    on left: 12 13, on right: 11 12
FuncDeclaration (54)
    on left: 14, on right: 3
ParametersOpt (55)
    on left: 15 16, on right: 14
TypeOpt (56)
    on left: 17 18, on right: 14
Parameters (57)
    on left: 19, on right: 15
Aux2 (58)
    on left: 20 21, on right: 19
FuncBody (59)
    on left: 22, on right: 14
VarsAndStatements (60)
    on left: 23 24, on right: 22 23
Aux7 (61)
    on left: 25 26 27, on right: 23
Statement (62)
    on left: 28 29 30 31 32 33 34 35 36, on right: 26 41
Aux6 (63)
    on left: 37 38, on right: 35
ExprOpt (64)
    on left: 39 40, on right: 31 32
Aux3 (65)
    on left: 41 42, on right: 29 30 31 41 43
Aux4 (66)
    on left: 43 44, on right: 30
ParseArgs (67)
    on left: 45 46, on right: 34
FuncInvocation (68)
    on left: 47, on right: 33 56
Aux40 (69)
    on left: 48 49 50, on right: 47
Aux41 (70)
    on left: 51 52, on right: 48 51
Expr (71)
    on left: 53 54 55 56 57 58 59 60 61 62, on right: 28 30 38 39 45
    48 51 57 59 60 61 62
Aux8 (72)
    on left: 63 64 65 66 67 68 69 70 71 72 73 74 75,
    on right: 62


state 0

    0 $accept: . Program $end

    PACKAGE  shift, and go to state 1

    Program  go to state 2


state 1

    1 Program: PACKAGE . ID SEMICOLON Declarations

    ID  shift, and go to state 3


state 2

    0 $accept: Program . $end

    $end  shift, and go to state 4


state 3

    1 Program: PACKAGE ID . SEMICOLON Declarations

    SEMICOLON  shift, and go to state 5


state 4

    0 $accept: Program $end .

    $default  accept


state 5

    1 Program: PACKAGE ID SEMICOLON . Declarations

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 4 (Declarations)

    Declarations     go to state 8
    VarDeclaration   go to state 9
    FuncDeclaration  go to state 10


state 6

    9 VarDeclaration: VAR . VarSpec
   10               | VAR . LPAR VarSpec SEMICOLON RPAR

    LPAR  shift, and go to state 11
    ID    shift, and go to state 12

    VarSpec  go to state 13


state 7

   14 FuncDeclaration: FUNC . ID LPAR ParametersOpt RPAR TypeOpt FuncBody

    ID  shift, and go to state 14


state 8

    1 Program: PACKAGE ID SEMICOLON Declarations .

    $default  reduce using rule 1 (Program)


state 9

    2 Declarations: VarDeclaration . SEMICOLON Declarations

    SEMICOLON  shift, and go to state 15


state 10

    3 Declarations: FuncDeclaration . SEMICOLON Declarations

    SEMICOLON  shift, and go to state 16


state 11

   10 VarDeclaration: VAR LPAR . VarSpec SEMICOLON RPAR

    ID  shift, and go to state 12

    VarSpec  go to state 17


state 12

   11 VarSpec: ID . Aux1 Type

    COMMA  shift, and go to state 18

    $default  reduce using rule 13 (Aux1)

    Aux1  go to state 19


state 13

    9 VarDeclaration: VAR VarSpec .

    $default  reduce using rule 9 (VarDeclaration)


state 14

   14 FuncDeclaration: FUNC ID . LPAR ParametersOpt RPAR TypeOpt FuncBody

    LPAR  shift, and go to state 20


state 15

    2 Declarations: VarDeclaration SEMICOLON . Declarations

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 4 (Declarations)

    Declarations     go to state 21
    VarDeclaration   go to state 9
    FuncDeclaration  go to state 10


state 16

    3 Declarations: FuncDeclaration SEMICOLON . Declarations

    VAR   shift, and go to state 6
    FUNC  shift, and go to state 7

    $default  reduce using rule 4 (Declarations)

    Declarations     go to state 22
    VarDeclaration   go to state 9
    FuncDeclaration  go to state 10


state 17

   10 VarDeclaration: VAR LPAR VarSpec . SEMICOLON RPAR

    SEMICOLON  shift, and go to state 23


state 18

   12 Aux1: COMMA . ID Aux1

    ID  shift, and go to state 24


state 19

   11 VarSpec: ID Aux1 . Type

    INT      shift, and go to state 25
    FLOAT32  shift, and go to state 26
    BOOL     shift, and go to state 27
    STRING   shift, and go to state 28

    Type  go to state 29


state 20

   14 FuncDeclaration: FUNC ID LPAR . ParametersOpt RPAR TypeOpt FuncBody

    ID  shift, and go to state 30

    $default  reduce using rule 16 (ParametersOpt)

    ParametersOpt  go to state 31
    Parameters     go to state 32


state 21

    2 Declarations: VarDeclaration SEMICOLON Declarations .

    $default  reduce using rule 2 (Declarations)


state 22

    3 Declarations: FuncDeclaration SEMICOLON Declarations .

    $default  reduce using rule 3 (Declarations)


state 23

   10 VarDeclaration: VAR LPAR VarSpec SEMICOLON . RPAR

    RPAR  shift, and go to state 33


state 24

   12 Aux1: COMMA ID . Aux1

    COMMA  shift, and go to state 18

    $default  reduce using rule 13 (Aux1)

    Aux1  go to state 34


state 25

    5 Type: INT .

    $default  reduce using rule 5 (Type)


state 26

    6 Type: FLOAT32 .

    $default  reduce using rule 6 (Type)


state 27

    7 Type: BOOL .

    $default  reduce using rule 7 (Type)


state 28

    8 Type: STRING .

    $default  reduce using rule 8 (Type)


state 29

   11 VarSpec: ID Aux1 Type .

    $default  reduce using rule 11 (VarSpec)


state 30

   19 Parameters: ID . Type Aux2

    INT      shift, and go to state 25
    FLOAT32  shift, and go to state 26
    BOOL     shift, and go to state 27
    STRING   shift, and go to state 28

    Type  go to state 35


state 31

   14 FuncDeclaration: FUNC ID LPAR ParametersOpt . RPAR TypeOpt FuncBody

    RPAR  shift, and go to state 36


state 32

   15 ParametersOpt: Parameters .

    $default  reduce using rule 15 (ParametersOpt)


state 33

   10 VarDeclaration: VAR LPAR VarSpec SEMICOLON RPAR .

    $default  reduce using rule 10 (VarDeclaration)


state 34

   12 Aux1: COMMA ID Aux1 .

    $default  reduce using rule 12 (Aux1)


state 35

   19 Parameters: ID Type . Aux2

    COMMA  shift, and go to state 37

    $default  reduce using rule 21 (Aux2)

    Aux2  go to state 38


state 36

   14 FuncDeclaration: FUNC ID LPAR ParametersOpt RPAR . TypeOpt FuncBody

    INT      shift, and go to state 25
    FLOAT32  shift, and go to state 26
    BOOL     shift, and go to state 27
    STRING   shift, and go to state 28

    $default  reduce using rule 18 (TypeOpt)

    Type     go to state 39
    TypeOpt  go to state 40


state 37

   20 Aux2: COMMA . ID Type

    ID  shift, and go to state 41


state 38

   19 Parameters: ID Type Aux2 .

    $default  reduce using rule 19 (Parameters)


state 39

   17 TypeOpt: Type .

    $default  reduce using rule 17 (TypeOpt)


state 40

   14 FuncDeclaration: FUNC ID LPAR ParametersOpt RPAR TypeOpt . FuncBody

    LBRACE  shift, and go to state 42

    FuncBody  go to state 43


state 41

   20 Aux2: COMMA ID . Type

    INT      shift, and go to state 25
    FLOAT32  shift, and go to state 26
    BOOL     shift, and go to state 27
    STRING   shift, and go to state 28

    Type  go to state 44


state 42

   22 FuncBody: LBRACE . VarsAndStatements RBRACE

    $default  reduce using rule 24 (VarsAndStatements)

    VarsAndStatements  go to state 45


state 43

   14 FuncDeclaration: FUNC ID LPAR ParametersOpt RPAR TypeOpt FuncBody .

    $default  reduce using rule 14 (FuncDeclaration)


state 44

   20 Aux2: COMMA ID Type .

    $default  reduce using rule 20 (Aux2)


state 45

   22 FuncBody: LBRACE VarsAndStatements . RBRACE
   23 VarsAndStatements: VarsAndStatements . Aux7 SEMICOLON

    error   shift, and go to state 46
    RETURN  shift, and go to state 47
    LBRACE  shift, and go to state 48
    RBRACE  shift, and go to state 49
    FOR     shift, and go to state 50
    IF      shift, and go to state 51
    VAR     shift, and go to state 6
    PRINT   shift, and go to state 52
    ID      shift, and go to state 53

    SEMICOLON  reduce using rule 27 (Aux7)

    VarDeclaration  go to state 54
    Aux7            go to state 55
    Statement       go to state 56
    ParseArgs       go to state 57
    FuncInvocation  go to state 58


state 46

   36 Statement: error .

    $default  reduce using rule 36 (Statement)


state 47

   32 Statement: RETURN . ExprOpt

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    $default  reduce using rule 40 (ExprOpt)

    ExprOpt         go to state 66
    FuncInvocation  go to state 67
    Expr            go to state 68


state 48

   29 Statement: LBRACE . Aux3 RBRACE

    error   shift, and go to state 46
    RETURN  shift, and go to state 47
    LBRACE  shift, and go to state 48
    FOR     shift, and go to state 50
    IF      shift, and go to state 51
    PRINT   shift, and go to state 52
    ID      shift, and go to state 53

    RBRACE  reduce using rule 42 (Aux3)

    Statement       go to state 69
    Aux3            go to state 70
    ParseArgs       go to state 57
    FuncInvocation  go to state 58


state 49

   22 FuncBody: LBRACE VarsAndStatements RBRACE .

    $default  reduce using rule 22 (FuncBody)


state 50

   31 Statement: FOR . ExprOpt LBRACE Aux3 RBRACE

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    $default  reduce using rule 40 (ExprOpt)

    ExprOpt         go to state 71
    FuncInvocation  go to state 67
    Expr            go to state 68


state 51

   30 Statement: IF . Expr LBRACE Aux3 RBRACE Aux4

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    FuncInvocation  go to state 67
    Expr            go to state 72


state 52

   35 Statement: PRINT . LPAR Aux6 RPAR

    LPAR  shift, and go to state 73


state 53

   28 Statement: ID . ASSIGN Expr
   45 ParseArgs: ID . COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR
   46          | ID . COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR
   47 FuncInvocation: ID . LPAR Aux40 RPAR

    ASSIGN  shift, and go to state 74
    COMMA   shift, and go to state 75
    LPAR    shift, and go to state 76


state 54

   25 Aux7: VarDeclaration .

    $default  reduce using rule 25 (Aux7)


state 55

   23 VarsAndStatements: VarsAndStatements Aux7 . SEMICOLON

    SEMICOLON  shift, and go to state 77


state 56

   26 Aux7: Statement .

    $default  reduce using rule 26 (Aux7)


state 57

   34 Statement: ParseArgs .

    $default  reduce using rule 34 (Statement)


state 58

   33 Statement: FuncInvocation .

    $default  reduce using rule 33 (Statement)


state 59

   57 Expr: LPAR . Expr RPAR
   58     | LPAR . error RPAR

    error    shift, and go to state 78
    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    FuncInvocation  go to state 67
    Expr            go to state 79


state 60

   60 Expr: MINUS . Expr

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    FuncInvocation  go to state 67
    Expr            go to state 80


state 61

   59 Expr: NOT . Expr

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    FuncInvocation  go to state 67
    Expr            go to state 81


state 62

   61 Expr: PLUS . Expr

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    FuncInvocation  go to state 67
    Expr            go to state 82


state 63

   53 Expr: INTLIT .

    $default  reduce using rule 53 (Expr)


state 64

   47 FuncInvocation: ID . LPAR Aux40 RPAR
   55 Expr: ID .

    LPAR  shift, and go to state 76

    $default  reduce using rule 55 (Expr)


state 65

   54 Expr: REALLIT .

    $default  reduce using rule 54 (Expr)


state 66

   32 Statement: RETURN ExprOpt .

    $default  reduce using rule 32 (Statement)


state 67

   56 Expr: FuncInvocation .

    $default  reduce using rule 56 (Expr)


state 68

   39 ExprOpt: Expr .
   62 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 83
    STAR   shift, and go to state 84
    DIV    shift, and go to state 85
    EQ     shift, and go to state 86
    GE     shift, and go to state 87
    GT     shift, and go to state 88
    LE     shift, and go to state 89
    LT     shift, and go to state 90
    MINUS  shift, and go to state 91
    MOD    shift, and go to state 92
    NE     shift, and go to state 93
    OR     shift, and go to state 94
    PLUS   shift, and go to state 95

    $default  reduce using rule 39 (ExprOpt)

    Aux8  go to state 96


state 69

   41 Aux3: Statement . SEMICOLON Aux3

    SEMICOLON  shift, and go to state 97


state 70

   29 Statement: LBRACE Aux3 . RBRACE

    RBRACE  shift, and go to state 98


state 71

   31 Statement: FOR ExprOpt . LBRACE Aux3 RBRACE

    LBRACE  shift, and go to state 99


state 72

   30 Statement: IF Expr . LBRACE Aux3 RBRACE Aux4
   62 Expr: Expr . Aux8 Expr

    AND     shift, and go to state 83
    STAR    shift, and go to state 84
    DIV     shift, and go to state 85
    EQ      shift, and go to state 86
    GE      shift, and go to state 87
    GT      shift, and go to state 88
    LBRACE  shift, and go to state 100
    LE      shift, and go to state 89
    LT      shift, and go to state 90
    MINUS   shift, and go to state 91
    MOD     shift, and go to state 92
    NE      shift, and go to state 93
    OR      shift, and go to state 94
    PLUS    shift, and go to state 95

    Aux8  go to state 96


state 73

   35 Statement: PRINT LPAR . Aux6 RPAR

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    STRLIT   shift, and go to state 101
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    Aux6            go to state 102
    FuncInvocation  go to state 67
    Expr            go to state 103


state 74

   28 Statement: ID ASSIGN . Expr

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    FuncInvocation  go to state 67
    Expr            go to state 104


state 75

   45 ParseArgs: ID COMMA . BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR
   46          | ID COMMA . BLANKID ASSIGN PARSEINT LPAR error RPAR

    BLANKID  shift, and go to state 105


state 76

   47 FuncInvocation: ID LPAR . Aux40 RPAR

    error    shift, and go to state 106
    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    RPAR  reduce using rule 50 (Aux40)

    FuncInvocation  go to state 67
    Aux40           go to state 107
    Expr            go to state 108


state 77

   23 VarsAndStatements: VarsAndStatements Aux7 SEMICOLON .

    $default  reduce using rule 23 (VarsAndStatements)


state 78

   58 Expr: LPAR error . RPAR

    RPAR  shift, and go to state 109


state 79

   57 Expr: LPAR Expr . RPAR
   62     | Expr . Aux8 Expr

    AND    shift, and go to state 83
    STAR   shift, and go to state 84
    DIV    shift, and go to state 85
    EQ     shift, and go to state 86
    GE     shift, and go to state 87
    GT     shift, and go to state 88
    LE     shift, and go to state 89
    LT     shift, and go to state 90
    MINUS  shift, and go to state 91
    MOD    shift, and go to state 92
    NE     shift, and go to state 93
    OR     shift, and go to state 94
    PLUS   shift, and go to state 95
    RPAR   shift, and go to state 110

    Aux8  go to state 96


state 80

   60 Expr: MINUS Expr .
   62     | Expr . Aux8 Expr

    $default  reduce using rule 60 (Expr)

    Aux8  go to state 96


state 81

   59 Expr: NOT Expr .
   62     | Expr . Aux8 Expr

    AND    shift, and go to state 83
    STAR   shift, and go to state 84
    DIV    shift, and go to state 85
    EQ     shift, and go to state 86
    GE     shift, and go to state 87
    GT     shift, and go to state 88
    LE     shift, and go to state 89
    LT     shift, and go to state 90
    MINUS  shift, and go to state 91
    MOD    shift, and go to state 92
    NE     shift, and go to state 93
    OR     shift, and go to state 94
    PLUS   shift, and go to state 95

    $default  reduce using rule 59 (Expr)

    Aux8  go to state 96


state 82

   61 Expr: PLUS Expr .
   62     | Expr . Aux8 Expr

    $default  reduce using rule 61 (Expr)

    Aux8  go to state 96


state 83

   69 Aux8: AND .

    $default  reduce using rule 69 (Aux8)


state 84

   65 Aux8: STAR .

    $default  reduce using rule 65 (Aux8)


state 85

   66 Aux8: DIV .

    $default  reduce using rule 66 (Aux8)


state 86

   72 Aux8: EQ .

    $default  reduce using rule 72 (Aux8)


state 87

   75 Aux8: GE .

    $default  reduce using rule 75 (Aux8)


state 88

   71 Aux8: GT .

    $default  reduce using rule 71 (Aux8)


state 89

   74 Aux8: LE .

    $default  reduce using rule 74 (Aux8)


state 90

   70 Aux8: LT .

    $default  reduce using rule 70 (Aux8)


state 91

   64 Aux8: MINUS .

    $default  reduce using rule 64 (Aux8)


state 92

   67 Aux8: MOD .

    $default  reduce using rule 67 (Aux8)


state 93

   73 Aux8: NE .

    $default  reduce using rule 73 (Aux8)


state 94

   68 Aux8: OR .

    $default  reduce using rule 68 (Aux8)


state 95

   63 Aux8: PLUS .

    $default  reduce using rule 63 (Aux8)


state 96

   62 Expr: Expr Aux8 . Expr

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    FuncInvocation  go to state 67
    Expr            go to state 111


state 97

   41 Aux3: Statement SEMICOLON . Aux3

    error   shift, and go to state 46
    RETURN  shift, and go to state 47
    LBRACE  shift, and go to state 48
    FOR     shift, and go to state 50
    IF      shift, and go to state 51
    PRINT   shift, and go to state 52
    ID      shift, and go to state 53

    RBRACE  reduce using rule 42 (Aux3)

    Statement       go to state 69
    Aux3            go to state 112
    ParseArgs       go to state 57
    FuncInvocation  go to state 58


state 98

   29 Statement: LBRACE Aux3 RBRACE .

    $default  reduce using rule 29 (Statement)


state 99

   31 Statement: FOR ExprOpt LBRACE . Aux3 RBRACE

    error   shift, and go to state 46
    RETURN  shift, and go to state 47
    LBRACE  shift, and go to state 48
    FOR     shift, and go to state 50
    IF      shift, and go to state 51
    PRINT   shift, and go to state 52
    ID      shift, and go to state 53

    RBRACE  reduce using rule 42 (Aux3)

    Statement       go to state 69
    Aux3            go to state 113
    ParseArgs       go to state 57
    FuncInvocation  go to state 58


state 100

   30 Statement: IF Expr LBRACE . Aux3 RBRACE Aux4

    error   shift, and go to state 46
    RETURN  shift, and go to state 47
    LBRACE  shift, and go to state 48
    FOR     shift, and go to state 50
    IF      shift, and go to state 51
    PRINT   shift, and go to state 52
    ID      shift, and go to state 53

    RBRACE  reduce using rule 42 (Aux3)

    Statement       go to state 69
    Aux3            go to state 114
    ParseArgs       go to state 57
    FuncInvocation  go to state 58


state 101

   37 Aux6: STRLIT .

    $default  reduce using rule 37 (Aux6)


state 102

   35 Statement: PRINT LPAR Aux6 . RPAR

    RPAR  shift, and go to state 115


state 103

   38 Aux6: Expr .
   62 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 83
    STAR   shift, and go to state 84
    DIV    shift, and go to state 85
    EQ     shift, and go to state 86
    GE     shift, and go to state 87
    GT     shift, and go to state 88
    LE     shift, and go to state 89
    LT     shift, and go to state 90
    MINUS  shift, and go to state 91
    MOD    shift, and go to state 92
    NE     shift, and go to state 93
    OR     shift, and go to state 94
    PLUS   shift, and go to state 95

    $default  reduce using rule 38 (Aux6)

    Aux8  go to state 96


state 104

   28 Statement: ID ASSIGN Expr .
   62 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 83
    STAR   shift, and go to state 84
    DIV    shift, and go to state 85
    EQ     shift, and go to state 86
    GE     shift, and go to state 87
    GT     shift, and go to state 88
    LE     shift, and go to state 89
    LT     shift, and go to state 90
    MINUS  shift, and go to state 91
    MOD    shift, and go to state 92
    NE     shift, and go to state 93
    OR     shift, and go to state 94
    PLUS   shift, and go to state 95

    $default  reduce using rule 28 (Statement)

    Aux8  go to state 96


state 105

   45 ParseArgs: ID COMMA BLANKID . ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR
   46          | ID COMMA BLANKID . ASSIGN PARSEINT LPAR error RPAR

    ASSIGN  shift, and go to state 116


state 106

   49 Aux40: error .

    $default  reduce using rule 49 (Aux40)


state 107

   47 FuncInvocation: ID LPAR Aux40 . RPAR

    RPAR  shift, and go to state 117


state 108

   48 Aux40: Expr . Aux41
   62 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 83
    STAR   shift, and go to state 84
    COMMA  shift, and go to state 118
    DIV    shift, and go to state 85
    EQ     shift, and go to state 86
    GE     shift, and go to state 87
    GT     shift, and go to state 88
    LE     shift, and go to state 89
    LT     shift, and go to state 90
    MINUS  shift, and go to state 91
    MOD    shift, and go to state 92
    NE     shift, and go to state 93
    OR     shift, and go to state 94
    PLUS   shift, and go to state 95

    $default  reduce using rule 52 (Aux41)

    Aux41  go to state 119
    Aux8   go to state 96


state 109

   58 Expr: LPAR error RPAR .

    $default  reduce using rule 58 (Expr)


state 110

   57 Expr: LPAR Expr RPAR .

    $default  reduce using rule 57 (Expr)


state 111

   62 Expr: Expr . Aux8 Expr
   62     | Expr Aux8 Expr .

    AND    shift, and go to state 83
    STAR   shift, and go to state 84
    DIV    shift, and go to state 85
    EQ     shift, and go to state 86
    GE     shift, and go to state 87
    GT     shift, and go to state 88
    LE     shift, and go to state 89
    LT     shift, and go to state 90
    MINUS  shift, and go to state 91
    MOD    shift, and go to state 92
    NE     shift, and go to state 93
    OR     shift, and go to state 94
    PLUS   shift, and go to state 95

    AND       [reduce using rule 62 (Expr)]
    STAR      [reduce using rule 62 (Expr)]
    DIV       [reduce using rule 62 (Expr)]
    EQ        [reduce using rule 62 (Expr)]
    GE        [reduce using rule 62 (Expr)]
    GT        [reduce using rule 62 (Expr)]
    LE        [reduce using rule 62 (Expr)]
    LT        [reduce using rule 62 (Expr)]
    MINUS     [reduce using rule 62 (Expr)]
    MOD       [reduce using rule 62 (Expr)]
    NE        [reduce using rule 62 (Expr)]
    OR        [reduce using rule 62 (Expr)]
    PLUS      [reduce using rule 62 (Expr)]
    $default  reduce using rule 62 (Expr)

    Aux8  go to state 96


state 112

   41 Aux3: Statement SEMICOLON Aux3 .

    $default  reduce using rule 41 (Aux3)


state 113

   31 Statement: FOR ExprOpt LBRACE Aux3 . RBRACE

    RBRACE  shift, and go to state 120


state 114

   30 Statement: IF Expr LBRACE Aux3 . RBRACE Aux4

    RBRACE  shift, and go to state 121


state 115

   35 Statement: PRINT LPAR Aux6 RPAR .

    $default  reduce using rule 35 (Statement)


state 116

   45 ParseArgs: ID COMMA BLANKID ASSIGN . PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR
   46          | ID COMMA BLANKID ASSIGN . PARSEINT LPAR error RPAR

    PARSEINT  shift, and go to state 122


state 117

   47 FuncInvocation: ID LPAR Aux40 RPAR .

    $default  reduce using rule 47 (FuncInvocation)


state 118

   51 Aux41: COMMA . Expr Aux41

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    FuncInvocation  go to state 67
    Expr            go to state 123


state 119

   48 Aux40: Expr Aux41 .

    $default  reduce using rule 48 (Aux40)


state 120

   31 Statement: FOR ExprOpt LBRACE Aux3 RBRACE .

    $default  reduce using rule 31 (Statement)


state 121

   30 Statement: IF Expr LBRACE Aux3 RBRACE . Aux4

    ELSE  shift, and go to state 124

    $default  reduce using rule 44 (Aux4)

    Aux4  go to state 125


state 122

   45 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT . LPAR CMDARGS LSQ Expr RSQ RPAR
   46          | ID COMMA BLANKID ASSIGN PARSEINT . LPAR error RPAR

    LPAR  shift, and go to state 126


state 123

   51 Aux41: COMMA Expr . Aux41
   62 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 83
    STAR   shift, and go to state 84
    COMMA  shift, and go to state 118
    DIV    shift, and go to state 85
    EQ     shift, and go to state 86
    GE     shift, and go to state 87
    GT     shift, and go to state 88
    LE     shift, and go to state 89
    LT     shift, and go to state 90
    MINUS  shift, and go to state 91
    MOD    shift, and go to state 92
    NE     shift, and go to state 93
    OR     shift, and go to state 94
    PLUS   shift, and go to state 95

    $default  reduce using rule 52 (Aux41)

    Aux41  go to state 127
    Aux8   go to state 96


state 124

   43 Aux4: ELSE . LBRACE Aux3 RBRACE

    LBRACE  shift, and go to state 128


state 125

   30 Statement: IF Expr LBRACE Aux3 RBRACE Aux4 .

    $default  reduce using rule 30 (Statement)


state 126

   45 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR . CMDARGS LSQ Expr RSQ RPAR
   46          | ID COMMA BLANKID ASSIGN PARSEINT LPAR . error RPAR

    error    shift, and go to state 129
    CMDARGS  shift, and go to state 130


state 127

   51 Aux41: COMMA Expr Aux41 .

    $default  reduce using rule 51 (Aux41)


state 128

   43 Aux4: ELSE LBRACE . Aux3 RBRACE

    error   shift, and go to state 46
    RETURN  shift, and go to state 47
    LBRACE  shift, and go to state 48
    FOR     shift, and go to state 50
    IF      shift, and go to state 51
    PRINT   shift, and go to state 52
    ID      shift, and go to state 53

    RBRACE  reduce using rule 42 (Aux3)

    Statement       go to state 69
    Aux3            go to state 131
    ParseArgs       go to state 57
    FuncInvocation  go to state 58


state 129

   46 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR error . RPAR

    RPAR  shift, and go to state 132


state 130

   45 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS . LSQ Expr RSQ RPAR

    LSQ  shift, and go to state 133


state 131

   43 Aux4: ELSE LBRACE Aux3 . RBRACE

    RBRACE  shift, and go to state 134


state 132

   46 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR error RPAR .

    $default  reduce using rule 46 (ParseArgs)


state 133

   45 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ . Expr RSQ RPAR

    LPAR     shift, and go to state 59
    MINUS    shift, and go to state 60
    NOT      shift, and go to state 61
    PLUS     shift, and go to state 62
    INTLIT   shift, and go to state 63
    ID       shift, and go to state 64
    REALLIT  shift, and go to state 65

    FuncInvocation  go to state 67
    Expr            go to state 135


state 134

   43 Aux4: ELSE LBRACE Aux3 RBRACE .

    $default  reduce using rule 43 (Aux4)


state 135

   45 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr . RSQ RPAR
   62 Expr: Expr . Aux8 Expr

    AND    shift, and go to state 83
    STAR   shift, and go to state 84
    DIV    shift, and go to state 85
    EQ     shift, and go to state 86
    GE     shift, and go to state 87
    GT     shift, and go to state 88
    LE     shift, and go to state 89
    LT     shift, and go to state 90
    MINUS  shift, and go to state 91
    MOD    shift, and go to state 92
    NE     shift, and go to state 93
    OR     shift, and go to state 94
    PLUS   shift, and go to state 95
    RSQ    shift, and go to state 136

    Aux8  go to state 96


state 136

   45 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ . RPAR

    RPAR  shift, and go to state 137


state 137

   45 ParseArgs: ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR .

    $default  reduce using rule 45 (ParseArgs)
